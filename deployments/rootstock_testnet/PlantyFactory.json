{
  "address": "0x4A15bB7C738C1237b61d0A96dC2027F067A091Fd",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialSpotPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delta",
          "type": "uint256"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "assetToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "assetInitialSupply",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "usdcToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "usdcInitialSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialSpotPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delta",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocolFeeMultiplier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tradeFeeMultiplier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "publicSaleDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "publicSalePrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPlantyPool.CreatePoolInput",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPools",
      "outputs": [
        {
          "internalType": "contract PlantyPool[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPoolsInfo",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "poolAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "spotPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "deltas",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "protocolFeeMultipliers",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tradeFeeMultipliers",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "reserveAssets",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "reserveUSDCs",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "name": "getPoolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "spotPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "delta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolFeeMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tradeFeeMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveAsset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveUSDC",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "contract PlantyPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x87f3de1c7d12cf42d47a3b2b41a497d6a76e8376860fefa3bf72bae36f952218",
  "receipt": {
    "to": null,
    "from": "0x43081596ed30F31F8D369c40a689B1dBb5434fFc",
    "contractAddress": "0x4A15bB7C738C1237b61d0A96dC2027F067A091Fd",
    "transactionIndex": 0,
    "gasUsed": "2543144",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x6a3249691ab35b9e1013c55b88e70a7ea4698eecac99dca2785c74fadf611f5a",
    "transactionHash": "0x87f3de1c7d12cf42d47a3b2b41a497d6a76e8376860fefa3bf72bae36f952218",
    "logs": [],
    "blockNumber": 5766388,
    "cumulativeGasUsed": "2543144",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dd74cd990434e3af7f10da0514fb5d17",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialSpotPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetInitialSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"usdcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdcInitialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialSpotPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFeeMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradeFeeMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicSalePrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IPlantyPool.CreatePoolInput\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPools\",\"outputs\":[{\"internalType\":\"contract PlantyPool[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolsInfo\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"poolAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"spotPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"deltas\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"protocolFeeMultipliers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tradeFeeMultipliers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"reserveAssets\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"reserveUSDCs\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"spotPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFeeMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradeFeeMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveUSDC\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"contract PlantyPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createPool((address,uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"\\ud480 \\uc0dd\\uc131 \\ud568\\uc218\"},\"getAllPools()\":{\"notice\":\"\\ubaa8\\ub4e0 \\ud480\\uc758 \\uc8fc\\uc18c \\ubc18\\ud658 \\ud568\\uc218\"},\"getAllPoolsInfo()\":{\"notice\":\"\\ubaa8\\ub4e0 \\ud480\\uc758 \\uc815\\ubcf4\\ub97c \\ud655\\uc778\\ud558\\ub294 \\ud568\\uc218\"},\"getPoolInfo(address)\":{\"notice\":\"\\ud2b9\\uc815 \\ud480\\uc758 \\uc815\\ubcf4 \\ud655\\uc778 \\ud568\\uc218\"},\"pools(uint256)\":{\"notice\":\"\\ud480 \\uc815\\ubcf4 \\uc800\\uc7a5\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/PlantyFactory.sol\":\"PlantyFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"},\"src/contracts/PlantyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./PlantyPool.sol\\\";\\nimport \\\"./interface/IPlantyPool.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract PlantyFactory {\\n    /// @notice \\ud480 \\uc815\\ubcf4 \\uc800\\uc7a5\\n    PlantyPool[] public pools;\\n    address public admin;\\n\\n    event PoolCreated(address indexed poolAddress, address indexed creator, uint256 initialSpotPrice, uint256 delta);\\n\\n    constructor() {\\n        admin = msg.sender;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"Only admin can call this function\\\");\\n        _;\\n    }\\n\\n    /// @notice \\uad00\\ub9ac\\uc790 \\uad8c\\ud55c \\ubd80\\uc5ec \\ud568\\uc218\\n    // function setAdmin(address admin) external onlyAdmin {\\n    //     transferOwnership(admin);\\n    // }\\n\\n    /// @notice \\ud480 \\uc0dd\\uc131 \\ud568\\uc218\\n    function createPool(IPlantyPool.CreatePoolInput memory params) external onlyAdmin returns (address) {\\n        PlantyPool newPool = new PlantyPool(msg.sender, params);\\n        pools.push(newPool);\\n\\n        // \\ucd08\\uae30 \\uacf5\\uae09 \\ud1a0\\ud070 \\uc804\\uc1a1\\n        IERC20(params.assetToken).transferFrom(msg.sender, address(this), params.assetInitialSupply);\\n        IERC20(params.usdcToken).transferFrom(msg.sender, address(this), params.usdcInitialSupply);\\n        IERC20(params.assetToken).approve(address(newPool), params.assetInitialSupply);\\n        IERC20(params.usdcToken).approve(address(newPool), params.usdcInitialSupply);\\n\\n        newPool.addLiquidity(params.assetInitialSupply, params.usdcInitialSupply);\\n\\n        emit PoolCreated(address(newPool), msg.sender, params.initialSpotPrice, params.delta);\\n        return address(newPool);\\n    }\\n\\n    /// @notice \\ud2b9\\uc815 \\ud480\\uc758 \\uc815\\ubcf4 \\ud655\\uc778 \\ud568\\uc218\\n    function getPoolInfo(\\n        address poolAddress\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 spotPrice,\\n            uint256 delta,\\n            uint256 protocolFeeMultiplier,\\n            uint256 tradeFeeMultiplier,\\n            uint256 reserveAsset,\\n            uint256 reserveUSDC\\n        )\\n    {\\n        PlantyPool pool = PlantyPool(poolAddress);\\n        return (\\n            pool.spotPrice(),\\n            pool.delta(),\\n            pool.protocolFeeMultiplier(),\\n            pool.tradeFeeMultiplier(),\\n            pool.reserveAsset(),\\n            pool.reserveUSDC()\\n        );\\n    }\\n\\n    /// @notice \\ubaa8\\ub4e0 \\ud480\\uc758 \\uc815\\ubcf4\\ub97c \\ud655\\uc778\\ud558\\ub294 \\ud568\\uc218\\n    function getAllPoolsInfo()\\n        external\\n        view\\n        returns (\\n            address[] memory poolAddresses,\\n            uint256[] memory spotPrices,\\n            uint256[] memory deltas,\\n            uint256[] memory protocolFeeMultipliers,\\n            uint256[] memory tradeFeeMultipliers,\\n            uint256[] memory reserveAssets,\\n            uint256[] memory reserveUSDCs\\n        )\\n    {\\n        uint256 poolCount = pools.length;\\n        poolAddresses = new address[](poolCount);\\n        spotPrices = new uint256[](poolCount);\\n        deltas = new uint256[](poolCount);\\n        protocolFeeMultipliers = new uint256[](poolCount);\\n        tradeFeeMultipliers = new uint256[](poolCount);\\n        reserveAssets = new uint256[](poolCount);\\n        reserveUSDCs = new uint256[](poolCount);\\n\\n        for (uint256 i = 0; i < poolCount; i++) {\\n            PlantyPool pool = pools[i];\\n            poolAddresses[i] = address(pool);\\n            spotPrices[i] = pool.spotPrice();\\n            deltas[i] = pool.delta();\\n            protocolFeeMultipliers[i] = pool.protocolFeeMultiplier();\\n            tradeFeeMultipliers[i] = pool.tradeFeeMultiplier();\\n            reserveAssets[i] = pool.reserveAsset();\\n            reserveUSDCs[i] = pool.reserveUSDC();\\n        }\\n    }\\n\\n    /// @notice \\ubaa8\\ub4e0 \\ud480\\uc758 \\uc8fc\\uc18c \\ubc18\\ud658 \\ud568\\uc218\\n    function getAllPools() external view returns (PlantyPool[] memory) {\\n        return pools;\\n    }\\n}\\n\",\"keccak256\":\"0x7f8e9081a78c71110c8d99475018f37e5976b53b3ce320d496c142d32989fa2b\",\"license\":\"MIT\"},\"src/contracts/PlantyPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./common/utils/FixedPointMathLib.sol\\\";\\nimport \\\"./interface/IPlantyPool.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract PlantyPool is IPlantyPool, Ownable, ReentrancyGuard {\\n    using FixedPointMathLib for uint256;\\n\\n    IERC20 public assetToken; // \\uc2e4\\ubb3c \\uc790\\uc0b0 \\ud1a0\\ud070\\n    IERC20 public usdcToken; // USDC \\ud1a0\\ud070\\n    uint256 public reserveAsset; // \\ud480 \\ub0b4\\uc758 \\uc2e4\\ubb3c \\uc790\\uc0b0 \\ud1a0\\ud070\\uc758 \\uc218\\ub7c9\\n    uint256 public reserveUSDC; // \\ud480 \\ub0b4\\uc758 USDC \\uc218\\ub7c9\\n\\n    uint256 public spotPrice; // \\ud604\\uc7ac \\uac70\\ub798\\ub418\\ub294 Spot Price\\n    uint256 public delta; // \\uac00\\uaca9 \\ubcc0\\ud654\\ub7c9 (Delta)\\n    uint256 public protocolFeeMultiplier; // \\ud504\\ub85c\\ud1a0\\ucf5c \\uc218\\uc218\\ub8cc \\ube44\\uc728\\n    uint256 public tradeFeeMultiplier; // \\uac70\\ub798 \\uc218\\uc218\\ub8cc \\ube44\\uc728\\n\\n    event Swapped(address indexed user, uint256 assetAmount, uint256 usdcAmount, bool isBuying);\\n    event LiquidityAdded(address indexed user, uint256 assetAmount, uint256 usdcAmount);\\n    event PublicSaleConfigured(uint256 endTime, uint256 price);\\n    event PublicSalePurchase(address indexed user, uint256 assetAmount, uint256 usdcAmount);\\n    event PublicSaleSell(address indexed user, uint256 assetAmount, uint256 usdcAmount);\\n\\n    modifier onlyDuringPublicSale() {\\n        require(block.timestamp < publicSaleEndTime, \\\"Not in public sale period\\\");\\n        _;\\n    }\\n\\n    modifier onlyAfterPublicSale() {\\n        require(block.timestamp >= publicSaleEndTime, \\\"Public sale is active\\\");\\n        _;\\n    }\\n\\n    // Public Sale \\uad00\\ub828 \\ubcc0\\uc218\\n    uint256 public publicSaleEndTime;\\n    uint256 public publicSalePrice; // Public Sale \\uc2dc assetToken\\uc758 \\uc9c0\\uc815\\uac00\\n\\n    constructor(address admin, CreatePoolInput memory params) {\\n        assetToken = IERC20(params.assetToken);\\n        usdcToken = IERC20(params.usdcToken);\\n        spotPrice = params.initialSpotPrice;\\n        delta = params.delta;\\n        protocolFeeMultiplier = params.protocolFeeMultiplier;\\n        tradeFeeMultiplier = params.tradeFeeMultiplier;\\n\\n        // Public Sale \\uc124\\uc815\\n        publicSaleEndTime = block.timestamp + params.publicSaleDuration;\\n        publicSalePrice = params.publicSalePrice;\\n\\n        transferOwnership(admin);\\n\\n        emit PublicSaleConfigured(publicSaleEndTime, publicSalePrice);\\n    }\\n\\n    // Public Sale \\uc124\\uc815 \\ud568\\uc218 (admin\\ub9cc \\uc2e4\\ud589 \\uac00\\ub2a5)\\n    function configurePublicSale(uint256 duration, uint256 price) public onlyOwner {\\n        publicSaleEndTime = block.timestamp + duration;\\n        publicSalePrice = price;\\n\\n        emit PublicSaleConfigured(publicSaleEndTime, publicSalePrice);\\n    }\\n\\n    // Public Sale \\ub3d9\\uc548\\uc758 \\uc9c0\\uc815\\uac00 \\uad6c\\ub9e4\\n    function buyAssetDuringPublicSale(uint256 numItems) external nonReentrant onlyDuringPublicSale {\\n        require(numItems > 0, \\\"Must buy at least one item\\\");\\n        require(numItems <= reserveAsset, \\\"Insufficient asset liquidity\\\");\\n\\n        uint256 totalCost = (numItems * publicSalePrice) / 1e18;\\n\\n        reserveUSDC += totalCost;\\n        reserveAsset -= numItems;\\n\\n        require(usdcToken.transferFrom(msg.sender, address(this), totalCost), \\\"USDC transfer failed\\\");\\n        require(assetToken.balanceOf(address(this)) >= numItems, \\\"Insufficient asset liquidity\\\");\\n        assetToken.transfer(msg.sender, numItems);\\n\\n        emit PublicSalePurchase(msg.sender, numItems, totalCost);\\n    }\\n\\n    // Public Sale \\ub3d9\\uc548\\uc758 \\uc9c0\\uc815\\uac00 \\ud310\\ub9e4\\n    function sellAssetDuringPublicSale(uint256 numItems) external nonReentrant onlyDuringPublicSale {\\n        require(numItems > 0, \\\"Must sell at least one item\\\");\\n        uint256 totalRevenue = (numItems * publicSalePrice) / 1e18;\\n\\n        // \\uc678\\ubd80 \\ud638\\ucd9c \\uc804\\uc5d0 \\uc0c1\\ud0dc \\ubcc0\\uacbd (Check-Effect-Interaction)\\n        reserveAsset += numItems;\\n        reserveUSDC -= totalRevenue;\\n\\n        require(assetToken.transferFrom(msg.sender, address(this), numItems), \\\"Asset transfer failed\\\");\\n        require(usdcToken.balanceOf(address(this)) >= totalRevenue, \\\"Insufficient USDC liquidity\\\");\\n        usdcToken.transfer(msg.sender, totalRevenue);\\n\\n        emit PublicSaleSell(msg.sender, numItems, totalRevenue);\\n    }\\n\\n    function buyAsset(uint256 plantyTokenAmount) external nonReentrant onlyAfterPublicSale {\\n        // \\uc77c\\ubc18\\uc801\\uc778 \\uad6c\\ub9e4 \\ub85c\\uc9c1 (Public Sale \\uc774\\ud6c4)\\n        require(plantyTokenAmount > 0, \\\"Must buy at least one item\\\");\\n        (uint256 inputValue, uint256 newSpotPrice, , ) = getBuyInfo(plantyTokenAmount);\\n\\n        reserveUSDC += inputValue;\\n        reserveAsset -= plantyTokenAmount;\\n        spotPrice = newSpotPrice;\\n\\n        require(usdcToken.transferFrom(msg.sender, address(this), inputValue), \\\"USDC transfer failed\\\");\\n        require(assetToken.balanceOf(address(this)) >= plantyTokenAmount, \\\"Insufficient asset liquidity\\\");\\n        assetToken.transfer(msg.sender, plantyTokenAmount);\\n\\n        emit Swapped(msg.sender, plantyTokenAmount, inputValue, true);\\n    }\\n\\n    function sellAsset(uint256 plantyTokenAmount) external nonReentrant onlyAfterPublicSale {\\n        // \\uc77c\\ubc18\\uc801\\uc778 \\ud310\\ub9e4 \\ub85c\\uc9c1 (Public Sale \\uc774\\ud6c4)\\n        require(plantyTokenAmount > 0, \\\"Must sell at least one item\\\");\\n        (uint256 outputValue, uint256 newSpotPrice, , ) = getSellInfo(plantyTokenAmount);\\n\\n        reserveAsset += plantyTokenAmount;\\n        reserveUSDC -= outputValue;\\n        spotPrice = newSpotPrice;\\n\\n        require(assetToken.transferFrom(msg.sender, address(this), plantyTokenAmount), \\\"Asset transfer failed\\\");\\n        require(usdcToken.balanceOf(address(this)) >= outputValue, \\\"Insufficient USDC liquidity\\\");\\n        usdcToken.transfer(msg.sender, outputValue);\\n\\n        emit Swapped(msg.sender, plantyTokenAmount, outputValue, false);\\n    }\\n\\n    function getBuyInfo(\\n        uint256 plantyTokenAmount\\n    ) public view returns (uint256 inputValue, uint256 newSpotPrice, uint256 tradeFee, uint256 protocolFee) {\\n        require(plantyTokenAmount > 0, \\\"Invalid number of items\\\");\\n\\n        uint256 buyAmount = (plantyTokenAmount * spotPrice) / 1e18;\\n        uint256 increment = (((plantyTokenAmount * (plantyTokenAmount - 1)) / 1e18) * delta) / 1e18 / 2;\\n\\n        newSpotPrice = spotPrice + increment;\\n\\n        protocolFee = buyAmount.mulWadUp(protocolFeeMultiplier);\\n        tradeFee = buyAmount.mulWadUp(tradeFeeMultiplier);\\n        inputValue = buyAmount + tradeFee + protocolFee;\\n    }\\n\\n    function getSellInfo(\\n        uint256 usdcAmount\\n    ) public view returns (uint256 outputValue, uint256 newSpotPrice, uint256 tradeFee, uint256 protocolFee) {\\n        require(usdcAmount > 0, \\\"Invalid number of items\\\");\\n\\n        uint256 sellAmount = (usdcAmount * 1e18) / spotPrice;\\n        uint256 decrement = (((usdcAmount * (usdcAmount + 1)) / 1e18) * delta) / 1e18 / 2;\\n\\n        uint256 decrementPlantyTokenAmount = (decrement * 1e18) / spotPrice;\\n        newSpotPrice = spotPrice - decrementPlantyTokenAmount;\\n\\n        protocolFee = sellAmount.mulWadUp(protocolFeeMultiplier);\\n        tradeFee = sellAmount.mulWadUp(tradeFeeMultiplier);\\n        outputValue = sellAmount - tradeFee - protocolFee;\\n    }\\n\\n    function addLiquidity(uint256 assetAmount, uint256 usdcAmount) external {\\n        require(assetAmount > 0 && usdcAmount > 0 && (usdcAmount * spotPrice) / 1e18 == assetAmount, \\\"Invalid amounts\\\");\\n\\n        reserveAsset += assetAmount;\\n        reserveUSDC += usdcAmount;\\n\\n        assetToken.transferFrom(msg.sender, address(this), assetAmount);\\n        usdcToken.transferFrom(msg.sender, address(this), usdcAmount);\\n\\n        emit LiquidityAdded(msg.sender, assetAmount, usdcAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xcf30d82a79432fa67d7de636563c0a5e72c33a211dc9db7f0d3d0d50858a3527\",\"license\":\"MIT\"},\"src/contracts/common/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant MAX_UINT256 = 2 ** 256 - 1;\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide x * y by the denominator.\\n            z := div(mul(x, y), denominator)\\n        }\\n    }\\n\\n    function mulDivUp(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\\n                revert(0, 0)\\n            }\\n\\n            // If x * y modulo the denominator is strictly greater than 0,\\n            // 1 is added to round up the division of x * y by the denominator.\\n            z := add(gt(mod(mul(x, y), denominator), 0), div(mul(x, y), denominator))\\n        }\\n    }\\n\\n    function rpow(uint256 x, uint256 n, uint256 scalar) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let y := x // We start y at x, which will help us make our initial estimate.\\n\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // We check y >= 2^(k + 8) but shift right by k bits\\n            // each branch to ensure that if x >= 256, then y >= 256.\\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n                y := shr(128, y)\\n                z := shl(64, z)\\n            }\\n            if iszero(lt(y, 0x1000000000000000000)) {\\n                y := shr(64, y)\\n                z := shl(32, z)\\n            }\\n            if iszero(lt(y, 0x10000000000)) {\\n                y := shr(32, y)\\n                z := shl(16, z)\\n            }\\n            if iszero(lt(y, 0x1000000)) {\\n                y := shr(16, y)\\n                z := shl(8, z)\\n            }\\n\\n            // Goal was to get z*z*y within a small factor of x. More iterations could\\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\\n\\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\\n\\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\\n\\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\\n\\n            // There is no overflow risk here since y < 2^136 after the first branch above.\\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If x+1 is a perfect square, the Babylonian method cycles between\\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    function unsafeMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Mod x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            z := mod(x, y)\\n        }\\n    }\\n\\n    function unsafeDiv(uint256 x, uint256 y) internal pure returns (uint256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Divide x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            r := div(x, y)\\n        }\\n    }\\n\\n    function unsafeDivUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Add 1 to x * y if x % y > 0. Note this will\\n            // return 0 instead of reverting if y is zero.\\n            z := add(gt(mod(x, y), 0), div(x, y))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x157e337325356197f974201588e5df25b4baa4b88658d282aea485065b8281e4\",\"license\":\"AGPL-3.0-only\"},\"src/contracts/interface/IPlantyPool.sol\":{\"content\":\"pragma solidity ^0.8.17;\\n\\ninterface IPlantyPool {\\n    struct CreatePoolInput {\\n        address assetToken;\\n        uint256 assetInitialSupply;\\n        address usdcToken;\\n        uint256 usdcInitialSupply;\\n        uint256 initialSpotPrice;\\n        uint256 delta;\\n        uint256 protocolFeeMultiplier;\\n        uint256 tradeFeeMultiplier;\\n        uint256 publicSaleDuration;\\n        uint256 publicSalePrice;\\n    }\\n\\n    function configurePublicSale(uint256 duration, uint256 price) external;\\n\\n    function buyAssetDuringPublicSale(uint256 numItems) external;\\n\\n    function sellAssetDuringPublicSale(uint256 numItems) external;\\n\\n    function buyAsset(uint256 numItems) external;\\n\\n    function sellAsset(uint256 numItems) external;\\n\\n    function getBuyInfo(\\n        uint256 plantyTokenAmount\\n    ) external view returns (uint256 inputValue, uint256 newSpotPrice, uint256 tradeFee, uint256 protocolFee);\\n\\n    function getSellInfo(\\n        uint256 plantyTokenAmount\\n    ) external view returns (uint256 outputValue, uint256 newSpotPrice, uint256 tradeFee, uint256 protocolFee);\\n\\n    function addLiquidity(uint256 assetAmount, uint256 usdcAmount) external;\\n}\\n\",\"keccak256\":\"0x0ef3fbfc2b095b67b8215ff58204f5a0487bc303adb2426ca930eeef357f97f4\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600180546001600160a01b03191633179055612cb9806100326000396000f3fe60806040523480156200001157600080fd5b50600436106200006a5760003560e01c806306bfa938146200006f578063ac4afa3814620000b8578063b4e6147914620000e8578063d88ff1f41462000107578063ec83158d1462000120578063f851a4401462000137575b600080fd5b620000866200008036600462000e1b565b6200014b565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0015b60405180910390f35b620000cf620000c936600462000e40565b620003cc565b6040516001600160a01b039091168152602001620000af565b620000f2620003f7565b604051620000af979695949392919062000e97565b62000111620009c7565b604051620000af919062000f6f565b620000cf620001313660046200100d565b62000a2b565b600154620000cf906001600160a01b031681565b6000806000806000806000879050806001600160a01b031663398482d86040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000198573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001be9190620010a9565b816001600160a01b03166312b495a86040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002239190620010a9565b826001600160a01b0316631ce4c78b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000262573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002889190620010a9565b836001600160a01b031663a15272976040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002c7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002ed9190620010a9565b846001600160a01b031663f85cb5c86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200032c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003529190620010a9565b856001600160a01b031663c87b502e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000391573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003b79190620010a9565b949d939c50919a509850965090945092505050565b60008181548110620003dd57600080fd5b6000918252602090912001546001600160a01b0316905081565b60608060608060608060606000808054905090508067ffffffffffffffff81111562000427576200042762000fbe565b60405190808252806020026020018201604052801562000451578160200160208202803683370190505b5097508067ffffffffffffffff81111562000470576200047062000fbe565b6040519080825280602002602001820160405280156200049a578160200160208202803683370190505b5096508067ffffffffffffffff811115620004b957620004b962000fbe565b604051908082528060200260200182016040528015620004e3578160200160208202803683370190505b5095508067ffffffffffffffff81111562000502576200050262000fbe565b6040519080825280602002602001820160405280156200052c578160200160208202803683370190505b5094508067ffffffffffffffff8111156200054b576200054b62000fbe565b60405190808252806020026020018201604052801562000575578160200160208202803683370190505b5093508067ffffffffffffffff81111562000594576200059462000fbe565b604051908082528060200260200182016040528015620005be578160200160208202803683370190505b5092508067ffffffffffffffff811115620005dd57620005dd62000fbe565b60405190808252806020026020018201604052801562000607578160200160208202803683370190505b50915060005b81811015620009bc5760008082815481106200062d576200062d620010c3565b9060005260206000200160009054906101000a90046001600160a01b03169050808a8381518110620006635762000663620010c3565b60200260200101906001600160a01b031690816001600160a01b031681525050806001600160a01b031663398482d86040518163ffffffff1660e01b8152600401602060405180830381865afa158015620006c2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006e89190620010a9565b898381518110620006fd57620006fd620010c3565b602002602001018181525050806001600160a01b03166312b495a86040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000748573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200076e9190620010a9565b888381518110620007835762000783620010c3565b602002602001018181525050806001600160a01b0316631ce4c78b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620007ce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007f49190620010a9565b878381518110620008095762000809620010c3565b602002602001018181525050806001600160a01b031663a15272976040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000854573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200087a9190620010a9565b8683815181106200088f576200088f620010c3565b602002602001018181525050806001600160a01b031663f85cb5c86040518163ffffffff1660e01b8152600401602060405180830381865afa158015620008da573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009009190620010a9565b858381518110620009155762000915620010c3565b602002602001018181525050806001600160a01b031663c87b502e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000960573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009869190620010a9565b8483815181106200099b576200099b620010c3565b60209081029190910101525080620009b381620010d9565b9150506200060d565b505090919293949596565b6060600080548060200260200160405190810160405280929190818152602001828054801562000a2157602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000a02575b5050505050905090565b6001546000906001600160a01b0316331462000a975760405162461bcd60e51b815260206004820152602160248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f6044820152603760f91b606482015260840160405180910390fd5b6000338360405162000aa99062000df5565b62000ab692919062001101565b604051809103906000f08015801562000ad3573d6000803e3d6000fd5b50600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b0383811691909117909155845160208601516040516323b872dd60e01b8152336004820152306024820152604481019190915292935016906323b872dd906064016020604051808303816000875af115801562000b77573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b9d919062001198565b50604080840151606085015191516323b872dd60e01b815233600482015230602482015260448101929092526001600160a01b0316906323b872dd906064016020604051808303816000875af115801562000bfc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c22919062001198565b508251602084015160405163095ea7b360e01b81526001600160a01b038481166004830152602482019290925291169063095ea7b3906044016020604051808303816000875af115801562000c7b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ca1919062001198565b506040808401516060850151915163095ea7b360e01b81526001600160a01b038481166004830152602482019390935291169063095ea7b3906044016020604051808303816000875af115801562000cfd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d23919062001198565b5060208301516060840151604051634e6a20ed60e11b81526001600160a01b03841692639cd441da9262000d6292600401918252602082015260400190565b600060405180830381600087803b15801562000d7d57600080fd5b505af115801562000d92573d6000803e3d6000fd5b505050608084015160a08501516040513393506001600160a01b038516927fd569a23a8cff45c641c5d5e4fb55b5e15e918f9acf0fc42b4909adc31f5f806c9262000de592918252602082015260400190565b60405180910390a390505b919050565b611ac780620011bd83390190565b80356001600160a01b038116811462000df057600080fd5b60006020828403121562000e2e57600080fd5b62000e398262000e03565b9392505050565b60006020828403121562000e5357600080fd5b5035919050565b600081518084526020808501945080840160005b8381101562000e8c5781518752958201959082019060010162000e6e565b509495945050505050565b60e08082528851908201819052600090602090610100840190828c01845b8281101562000edc5781516001600160a01b03168452928401929084019060010162000eb5565b5050508381038285015262000ef2818b62000e5a565b915050828103604084015262000f09818962000e5a565b9050828103606084015262000f1f818862000e5a565b9050828103608084015262000f35818762000e5a565b905082810360a084015262000f4b818662000e5a565b905082810360c084015262000f61818562000e5a565b9a9950505050505050505050565b6020808252825182820181905260009190848201906040850190845b8181101562000fb25783516001600160a01b03168352928401929184019160010162000f8b565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff811182821017156200100757634e487b7160e01b600052604160045260246000fd5b60405290565b600061014082840312156200102157600080fd5b6200102b62000fd4565b620010368362000e03565b815260208301356020820152620010506040840162000e03565b6040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e08201526101008084013581830152506101208084013581830152508091505092915050565b600060208284031215620010bc57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600060018201620010fa57634e487b7160e01b600052601160045260246000fd5b5060010190565b6001600160a01b038381168252825116602082015261016081016020830151604083015260408301516200114060608401826001600160a01b03169052565b5060608301516080830152608083015160a083015260a083015160c083015260c083015160e083015260e083015161010081818501528085015191505061012081818501528085015161014085015250509392505050565b600060208284031215620011ab57600080fd5b8151801515811462000e3957600080fdfe60806040523480156200001157600080fd5b5060405162001ac738038062001ac7833981016040819052620000349162000294565b6200003f336200010e565b600180558051600280546001600160a01b039283166001600160a01b031991821617909155604083015160038054919093169116179055608081015160065560a081015160075560c081015160085560e0810151600955610100810151620000a890426200035a565b600a55610120810151600b55620000bf826200015e565b7f37cd71faac1e03245089e1f80709a8db3925386e5e5f01e3958dafa369a34b36600a54600b54604051620000fe929190918252602082015260400190565b60405180910390a1505062000382565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b62000168620001e1565b6001600160a01b038116620001d35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b620001de816200010e565b50565b6000546001600160a01b031633146200023d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620001ca565b565b80516001600160a01b03811681146200025757600080fd5b919050565b60405161014081016001600160401b03811182821017156200028e57634e487b7160e01b600052604160045260246000fd5b60405290565b600080828403610160811215620002aa57600080fd5b620002b5846200023f565b925061014080601f1983011215620002cc57600080fd5b620002d66200025c565b9150620002e6602086016200023f565b82526040850151602083015262000300606086016200023f565b60408301526080850151606083015260a0850151608083015260c085015160a083015260e085015160c08301526101008086015160e084015261012080870151828501528287015181850152505050809150509250929050565b808201808211156200037c57634e487b7160e01b600052601160045260246000fd5b92915050565b61173580620003926000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806372b308fa116100b8578063a15272971161007c578063a152729714610267578063ade1bc2914610270578063c87b502e14610283578063e9bc63f71461028c578063f2fde38b1461029f578063f85cb5c8146102b257600080fd5b806372b308fa146101f45780638ba00299146102075780638da5cb5b1461023a5780639b6860c81461024b5780639cd441da1461025457600080fd5b806312b495a8116100ff57806312b495a8146101ba5780631ce4c78b146101d15780631e4d185f146101da578063398482d8146101e3578063715018a6146101ec57600080fd5b806307480fd81461013c5780630d20103b146101515780631083f76114610164578063110d35b81461019457806311eac855146101a7575b600080fd5b61014f61014a366004611589565b6102bb565b005b61014f61015f366004611589565b6105e9565b600254610177906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61014f6101a2366004611589565b610905565b600354610177906001600160a01b031681565b6101c360075481565b60405190815260200161018b565b6101c360085481565b6101c3600a5481565b6101c360065481565b61014f610beb565b61014f6102023660046115a2565b610bff565b61021a610215366004611589565b610c58565b60408051948552602085019390935291830152606082015260800161018b565b6000546001600160a01b0316610177565b6101c3600b5481565b61014f6102623660046115a2565b610d85565b6101c360095481565b61014f61027e366004611589565b610f5d565b6101c360055481565b61021a61029a366004611589565b61127a565b61014f6102ad3660046115c4565b6113cc565b6101c360045481565b6102c3611442565b600a544210156103125760405162461bcd60e51b81526020600482015260156024820152745075626c69632073616c652069732061637469766560581b60448201526064015b60405180910390fd5b600081116103625760405162461bcd60e51b815260206004820152601b60248201527f4d7573742073656c6c206174206c65617374206f6e65206974656d00000000006044820152606401610309565b60008061036e8361127a565b5050915091508260046000828254610386919061160a565b92505081905550816005600082825461039f919061161d565b909155505060068190556002546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906103dd90339030908890600401611630565b6020604051808303816000875af11580156103fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104209190611654565b6104645760405162461bcd60e51b8152602060048201526015602482015274105cdcd95d081d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610309565b6003546040516370a0823160e01b815230600482015283916001600160a01b0316906370a0823190602401602060405180830381865afa1580156104ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d09190611676565b101561051e5760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e742055534443206c697175696469747900000000006044820152606401610309565b60035460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561056f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105939190611654565b50604080518481526020810184905260009181019190915233907f5aa8e665a6e1c6a7d2c5b99a4189b04b54f8c24e567a02d8fb7d4a63f57e8d6b906060015b60405180910390a250506105e660018055565b50565b6105f1611442565b600a54421061063e5760405162461bcd60e51b8152602060048201526019602482015278139bdd081a5b881c1d589b1a58c81cd85b19481c195c9a5bd9603a1b6044820152606401610309565b6000811161068e5760405162461bcd60e51b815260206004820152601a60248201527f4d75737420627579206174206c65617374206f6e65206974656d0000000000006044820152606401610309565b6004548111156106b05760405162461bcd60e51b81526004016103099061168f565b6000670de0b6b3a7640000600b54836106c991906116c6565b6106d391906116dd565b905080600560008282546106e7919061160a565b925050819055508160046000828254610700919061161d565b90915550506003546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061073990339030908690600401611630565b6020604051808303816000875af1158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c9190611654565b6107bf5760405162461bcd60e51b81526020600482015260146024820152731554d110c81d1c985b9cd9995c8819985a5b195960621b6044820152606401610309565b6002546040516370a0823160e01b815230600482015283916001600160a01b0316906370a0823190602401602060405180830381865afa158015610807573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082b9190611676565b10156108495760405162461bcd60e51b81526004016103099061168f565b60025460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561089a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108be9190611654565b50604080518381526020810183905233917fca9998f7426828487d4e95306b1997d3ac26bb809bb11fddb00cda3c6283f7b491015b60405180910390a2506105e660018055565b61090d611442565b600a544210156109575760405162461bcd60e51b81526020600482015260156024820152745075626c69632073616c652069732061637469766560581b6044820152606401610309565b600081116109a75760405162461bcd60e51b815260206004820152601a60248201527f4d75737420627579206174206c65617374206f6e65206974656d0000000000006044820152606401610309565b6000806109b383610c58565b50509150915081600560008282546109cb919061160a565b9250508190555082600460008282546109e4919061161d565b909155505060068190556003546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610a2290339030908790600401611630565b6020604051808303816000875af1158015610a41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a659190611654565b610aa85760405162461bcd60e51b81526020600482015260146024820152731554d110c81d1c985b9cd9995c8819985a5b195960621b6044820152606401610309565b6002546040516370a0823160e01b815230600482015284916001600160a01b0316906370a0823190602401602060405180830381865afa158015610af0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b149190611676565b1015610b325760405162461bcd60e51b81526004016103099061168f565b60025460405163a9059cbb60e01b8152336004820152602481018590526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610b83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba79190611654565b50604080518481526020810184905260019181019190915233907f5aa8e665a6e1c6a7d2c5b99a4189b04b54f8c24e567a02d8fb7d4a63f57e8d6b906060016105d3565b610bf361149b565b610bfd60006114f5565b565b610c0761149b565b610c11824261160a565b600a819055600b82905560408051918252602082018390527f37cd71faac1e03245089e1f80709a8db3925386e5e5f01e3958dafa369a34b36910160405180910390a15050565b60008060008060008511610ca85760405162461bcd60e51b8152602060048201526017602482015276496e76616c6964206e756d626572206f66206974656d7360481b6044820152606401610309565b6000670de0b6b3a764000060065487610cc191906116c6565b610ccb91906116dd565b905060006002670de0b6b3a7640000600754670de0b6b3a764000060018b610cf3919061161d565b610cfd908c6116c6565b610d0791906116dd565b610d1191906116c6565b610d1b91906116dd565b610d2591906116dd565b905080600654610d35919061160a565b9450610d4c6008548361154590919063ffffffff16565b9250610d636009548361154590919063ffffffff16565b935082610d70858461160a565b610d7a919061160a565b955050509193509193565b600082118015610d955750600081115b8015610dc0575081670de0b6b3a764000060065483610db491906116c6565b610dbe91906116dd565b145b610dfe5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c696420616d6f756e747360881b6044820152606401610309565b8160046000828254610e10919061160a565b925050819055508060056000828254610e29919061160a565b90915550506002546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610e6290339030908790600401611630565b6020604051808303816000875af1158015610e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea59190611654565b506003546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610eda90339030908690600401611630565b6020604051808303816000875af1158015610ef9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1d9190611654565b50604080518381526020810183905233917fac1d76749e5447b7b16f5ab61447e1bd502f3bb4807af3b28e620d1700a6ee45910160405180910390a25050565b610f65611442565b600a544210610fb25760405162461bcd60e51b8152602060048201526019602482015278139bdd081a5b881c1d589b1a58c81cd85b19481c195c9a5bd9603a1b6044820152606401610309565b600081116110025760405162461bcd60e51b815260206004820152601b60248201527f4d7573742073656c6c206174206c65617374206f6e65206974656d00000000006044820152606401610309565b6000670de0b6b3a7640000600b548361101b91906116c6565b61102591906116dd565b90508160046000828254611039919061160a565b925050819055508060056000828254611052919061161d565b90915550506002546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061108b90339030908790600401611630565b6020604051808303816000875af11580156110aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ce9190611654565b6111125760405162461bcd60e51b8152602060048201526015602482015274105cdcd95d081d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610309565b6003546040516370a0823160e01b815230600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa15801561115a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117e9190611676565b10156111cc5760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e742055534443206c697175696469747900000000006044820152606401610309565b60035460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561121d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112419190611654565b50604080518381526020810183905233917f4649bca94dacc8cff7b6f4c534914e8a9bb5a78a628497b9d49930d2cef0dc6391016108f3565b600080600080600085116112ca5760405162461bcd60e51b8152602060048201526017602482015276496e76616c6964206e756d626572206f66206974656d7360481b6044820152606401610309565b6006546000906112e287670de0b6b3a76400006116c6565b6112ec91906116dd565b905060006002670de0b6b3a7640000600754670de0b6b3a76400008a6001611314919061160a565b61131e908c6116c6565b61132891906116dd565b61133291906116c6565b61133c91906116dd565b61134691906116dd565b9050600060065482670de0b6b3a764000061136191906116c6565b61136b91906116dd565b90508060065461137b919061161d565b95506113926008548461154590919063ffffffff16565b93506113a96009548461154590919063ffffffff16565b9450836113b6868561161d565b6113c0919061161d565b96505050509193509193565b6113d461149b565b6001600160a01b0381166114395760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610309565b6105e6816114f5565b6002600154036114945760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610309565b6002600155565b6000546001600160a01b03163314610bfd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610309565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061155a8383670de0b6b3a7640000611563565b90505b92915050565b600082600019048411830215820261157a57600080fd5b50910281810615159190040190565b60006020828403121561159b57600080fd5b5035919050565b600080604083850312156115b557600080fd5b50508035926020909101359150565b6000602082840312156115d657600080fd5b81356001600160a01b03811681146115ed57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561155d5761155d6115f4565b8181038181111561155d5761155d6115f4565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561166657600080fd5b815180151581146115ed57600080fd5b60006020828403121561168857600080fd5b5051919050565b6020808252601c908201527f496e73756666696369656e74206173736574206c697175696469747900000000604082015260600190565b808202811582820484141761155d5761155d6115f4565b6000826116fa57634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122045d0f3536b9cd34c53aa7ff68968c7857b972011ac1c79bf34f6931fd75562fa64736f6c63430008130033a264697066735822122070c213c24616c298032c4705813c32780aef64b71ff2a53fba5cfa1c663d993164736f6c63430008130033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200006a5760003560e01c806306bfa938146200006f578063ac4afa3814620000b8578063b4e6147914620000e8578063d88ff1f41462000107578063ec83158d1462000120578063f851a4401462000137575b600080fd5b620000866200008036600462000e1b565b6200014b565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0015b60405180910390f35b620000cf620000c936600462000e40565b620003cc565b6040516001600160a01b039091168152602001620000af565b620000f2620003f7565b604051620000af979695949392919062000e97565b62000111620009c7565b604051620000af919062000f6f565b620000cf620001313660046200100d565b62000a2b565b600154620000cf906001600160a01b031681565b6000806000806000806000879050806001600160a01b031663398482d86040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000198573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001be9190620010a9565b816001600160a01b03166312b495a86040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002239190620010a9565b826001600160a01b0316631ce4c78b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000262573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002889190620010a9565b836001600160a01b031663a15272976040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002c7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002ed9190620010a9565b846001600160a01b031663f85cb5c86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200032c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003529190620010a9565b856001600160a01b031663c87b502e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000391573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003b79190620010a9565b949d939c50919a509850965090945092505050565b60008181548110620003dd57600080fd5b6000918252602090912001546001600160a01b0316905081565b60608060608060608060606000808054905090508067ffffffffffffffff81111562000427576200042762000fbe565b60405190808252806020026020018201604052801562000451578160200160208202803683370190505b5097508067ffffffffffffffff81111562000470576200047062000fbe565b6040519080825280602002602001820160405280156200049a578160200160208202803683370190505b5096508067ffffffffffffffff811115620004b957620004b962000fbe565b604051908082528060200260200182016040528015620004e3578160200160208202803683370190505b5095508067ffffffffffffffff81111562000502576200050262000fbe565b6040519080825280602002602001820160405280156200052c578160200160208202803683370190505b5094508067ffffffffffffffff8111156200054b576200054b62000fbe565b60405190808252806020026020018201604052801562000575578160200160208202803683370190505b5093508067ffffffffffffffff81111562000594576200059462000fbe565b604051908082528060200260200182016040528015620005be578160200160208202803683370190505b5092508067ffffffffffffffff811115620005dd57620005dd62000fbe565b60405190808252806020026020018201604052801562000607578160200160208202803683370190505b50915060005b81811015620009bc5760008082815481106200062d576200062d620010c3565b9060005260206000200160009054906101000a90046001600160a01b03169050808a8381518110620006635762000663620010c3565b60200260200101906001600160a01b031690816001600160a01b031681525050806001600160a01b031663398482d86040518163ffffffff1660e01b8152600401602060405180830381865afa158015620006c2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006e89190620010a9565b898381518110620006fd57620006fd620010c3565b602002602001018181525050806001600160a01b03166312b495a86040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000748573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200076e9190620010a9565b888381518110620007835762000783620010c3565b602002602001018181525050806001600160a01b0316631ce4c78b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620007ce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007f49190620010a9565b878381518110620008095762000809620010c3565b602002602001018181525050806001600160a01b031663a15272976040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000854573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200087a9190620010a9565b8683815181106200088f576200088f620010c3565b602002602001018181525050806001600160a01b031663f85cb5c86040518163ffffffff1660e01b8152600401602060405180830381865afa158015620008da573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009009190620010a9565b858381518110620009155762000915620010c3565b602002602001018181525050806001600160a01b031663c87b502e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000960573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009869190620010a9565b8483815181106200099b576200099b620010c3565b60209081029190910101525080620009b381620010d9565b9150506200060d565b505090919293949596565b6060600080548060200260200160405190810160405280929190818152602001828054801562000a2157602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000a02575b5050505050905090565b6001546000906001600160a01b0316331462000a975760405162461bcd60e51b815260206004820152602160248201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f6044820152603760f91b606482015260840160405180910390fd5b6000338360405162000aa99062000df5565b62000ab692919062001101565b604051809103906000f08015801562000ad3573d6000803e3d6000fd5b50600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b0383811691909117909155845160208601516040516323b872dd60e01b8152336004820152306024820152604481019190915292935016906323b872dd906064016020604051808303816000875af115801562000b77573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b9d919062001198565b50604080840151606085015191516323b872dd60e01b815233600482015230602482015260448101929092526001600160a01b0316906323b872dd906064016020604051808303816000875af115801562000bfc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c22919062001198565b508251602084015160405163095ea7b360e01b81526001600160a01b038481166004830152602482019290925291169063095ea7b3906044016020604051808303816000875af115801562000c7b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ca1919062001198565b506040808401516060850151915163095ea7b360e01b81526001600160a01b038481166004830152602482019390935291169063095ea7b3906044016020604051808303816000875af115801562000cfd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d23919062001198565b5060208301516060840151604051634e6a20ed60e11b81526001600160a01b03841692639cd441da9262000d6292600401918252602082015260400190565b600060405180830381600087803b15801562000d7d57600080fd5b505af115801562000d92573d6000803e3d6000fd5b505050608084015160a08501516040513393506001600160a01b038516927fd569a23a8cff45c641c5d5e4fb55b5e15e918f9acf0fc42b4909adc31f5f806c9262000de592918252602082015260400190565b60405180910390a390505b919050565b611ac780620011bd83390190565b80356001600160a01b038116811462000df057600080fd5b60006020828403121562000e2e57600080fd5b62000e398262000e03565b9392505050565b60006020828403121562000e5357600080fd5b5035919050565b600081518084526020808501945080840160005b8381101562000e8c5781518752958201959082019060010162000e6e565b509495945050505050565b60e08082528851908201819052600090602090610100840190828c01845b8281101562000edc5781516001600160a01b03168452928401929084019060010162000eb5565b5050508381038285015262000ef2818b62000e5a565b915050828103604084015262000f09818962000e5a565b9050828103606084015262000f1f818862000e5a565b9050828103608084015262000f35818762000e5a565b905082810360a084015262000f4b818662000e5a565b905082810360c084015262000f61818562000e5a565b9a9950505050505050505050565b6020808252825182820181905260009190848201906040850190845b8181101562000fb25783516001600160a01b03168352928401929184019160010162000f8b565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff811182821017156200100757634e487b7160e01b600052604160045260246000fd5b60405290565b600061014082840312156200102157600080fd5b6200102b62000fd4565b620010368362000e03565b815260208301356020820152620010506040840162000e03565b6040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e08201526101008084013581830152506101208084013581830152508091505092915050565b600060208284031215620010bc57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600060018201620010fa57634e487b7160e01b600052601160045260246000fd5b5060010190565b6001600160a01b038381168252825116602082015261016081016020830151604083015260408301516200114060608401826001600160a01b03169052565b5060608301516080830152608083015160a083015260a083015160c083015260c083015160e083015260e083015161010081818501528085015191505061012081818501528085015161014085015250509392505050565b600060208284031215620011ab57600080fd5b8151801515811462000e3957600080fdfe60806040523480156200001157600080fd5b5060405162001ac738038062001ac7833981016040819052620000349162000294565b6200003f336200010e565b600180558051600280546001600160a01b039283166001600160a01b031991821617909155604083015160038054919093169116179055608081015160065560a081015160075560c081015160085560e0810151600955610100810151620000a890426200035a565b600a55610120810151600b55620000bf826200015e565b7f37cd71faac1e03245089e1f80709a8db3925386e5e5f01e3958dafa369a34b36600a54600b54604051620000fe929190918252602082015260400190565b60405180910390a1505062000382565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b62000168620001e1565b6001600160a01b038116620001d35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b620001de816200010e565b50565b6000546001600160a01b031633146200023d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620001ca565b565b80516001600160a01b03811681146200025757600080fd5b919050565b60405161014081016001600160401b03811182821017156200028e57634e487b7160e01b600052604160045260246000fd5b60405290565b600080828403610160811215620002aa57600080fd5b620002b5846200023f565b925061014080601f1983011215620002cc57600080fd5b620002d66200025c565b9150620002e6602086016200023f565b82526040850151602083015262000300606086016200023f565b60408301526080850151606083015260a0850151608083015260c085015160a083015260e085015160c08301526101008086015160e084015261012080870151828501528287015181850152505050809150509250929050565b808201808211156200037c57634e487b7160e01b600052601160045260246000fd5b92915050565b61173580620003926000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806372b308fa116100b8578063a15272971161007c578063a152729714610267578063ade1bc2914610270578063c87b502e14610283578063e9bc63f71461028c578063f2fde38b1461029f578063f85cb5c8146102b257600080fd5b806372b308fa146101f45780638ba00299146102075780638da5cb5b1461023a5780639b6860c81461024b5780639cd441da1461025457600080fd5b806312b495a8116100ff57806312b495a8146101ba5780631ce4c78b146101d15780631e4d185f146101da578063398482d8146101e3578063715018a6146101ec57600080fd5b806307480fd81461013c5780630d20103b146101515780631083f76114610164578063110d35b81461019457806311eac855146101a7575b600080fd5b61014f61014a366004611589565b6102bb565b005b61014f61015f366004611589565b6105e9565b600254610177906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61014f6101a2366004611589565b610905565b600354610177906001600160a01b031681565b6101c360075481565b60405190815260200161018b565b6101c360085481565b6101c3600a5481565b6101c360065481565b61014f610beb565b61014f6102023660046115a2565b610bff565b61021a610215366004611589565b610c58565b60408051948552602085019390935291830152606082015260800161018b565b6000546001600160a01b0316610177565b6101c3600b5481565b61014f6102623660046115a2565b610d85565b6101c360095481565b61014f61027e366004611589565b610f5d565b6101c360055481565b61021a61029a366004611589565b61127a565b61014f6102ad3660046115c4565b6113cc565b6101c360045481565b6102c3611442565b600a544210156103125760405162461bcd60e51b81526020600482015260156024820152745075626c69632073616c652069732061637469766560581b60448201526064015b60405180910390fd5b600081116103625760405162461bcd60e51b815260206004820152601b60248201527f4d7573742073656c6c206174206c65617374206f6e65206974656d00000000006044820152606401610309565b60008061036e8361127a565b5050915091508260046000828254610386919061160a565b92505081905550816005600082825461039f919061161d565b909155505060068190556002546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906103dd90339030908890600401611630565b6020604051808303816000875af11580156103fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104209190611654565b6104645760405162461bcd60e51b8152602060048201526015602482015274105cdcd95d081d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610309565b6003546040516370a0823160e01b815230600482015283916001600160a01b0316906370a0823190602401602060405180830381865afa1580156104ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d09190611676565b101561051e5760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e742055534443206c697175696469747900000000006044820152606401610309565b60035460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561056f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105939190611654565b50604080518481526020810184905260009181019190915233907f5aa8e665a6e1c6a7d2c5b99a4189b04b54f8c24e567a02d8fb7d4a63f57e8d6b906060015b60405180910390a250506105e660018055565b50565b6105f1611442565b600a54421061063e5760405162461bcd60e51b8152602060048201526019602482015278139bdd081a5b881c1d589b1a58c81cd85b19481c195c9a5bd9603a1b6044820152606401610309565b6000811161068e5760405162461bcd60e51b815260206004820152601a60248201527f4d75737420627579206174206c65617374206f6e65206974656d0000000000006044820152606401610309565b6004548111156106b05760405162461bcd60e51b81526004016103099061168f565b6000670de0b6b3a7640000600b54836106c991906116c6565b6106d391906116dd565b905080600560008282546106e7919061160a565b925050819055508160046000828254610700919061161d565b90915550506003546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061073990339030908690600401611630565b6020604051808303816000875af1158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c9190611654565b6107bf5760405162461bcd60e51b81526020600482015260146024820152731554d110c81d1c985b9cd9995c8819985a5b195960621b6044820152606401610309565b6002546040516370a0823160e01b815230600482015283916001600160a01b0316906370a0823190602401602060405180830381865afa158015610807573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082b9190611676565b10156108495760405162461bcd60e51b81526004016103099061168f565b60025460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561089a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108be9190611654565b50604080518381526020810183905233917fca9998f7426828487d4e95306b1997d3ac26bb809bb11fddb00cda3c6283f7b491015b60405180910390a2506105e660018055565b61090d611442565b600a544210156109575760405162461bcd60e51b81526020600482015260156024820152745075626c69632073616c652069732061637469766560581b6044820152606401610309565b600081116109a75760405162461bcd60e51b815260206004820152601a60248201527f4d75737420627579206174206c65617374206f6e65206974656d0000000000006044820152606401610309565b6000806109b383610c58565b50509150915081600560008282546109cb919061160a565b9250508190555082600460008282546109e4919061161d565b909155505060068190556003546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610a2290339030908790600401611630565b6020604051808303816000875af1158015610a41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a659190611654565b610aa85760405162461bcd60e51b81526020600482015260146024820152731554d110c81d1c985b9cd9995c8819985a5b195960621b6044820152606401610309565b6002546040516370a0823160e01b815230600482015284916001600160a01b0316906370a0823190602401602060405180830381865afa158015610af0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b149190611676565b1015610b325760405162461bcd60e51b81526004016103099061168f565b60025460405163a9059cbb60e01b8152336004820152602481018590526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610b83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba79190611654565b50604080518481526020810184905260019181019190915233907f5aa8e665a6e1c6a7d2c5b99a4189b04b54f8c24e567a02d8fb7d4a63f57e8d6b906060016105d3565b610bf361149b565b610bfd60006114f5565b565b610c0761149b565b610c11824261160a565b600a819055600b82905560408051918252602082018390527f37cd71faac1e03245089e1f80709a8db3925386e5e5f01e3958dafa369a34b36910160405180910390a15050565b60008060008060008511610ca85760405162461bcd60e51b8152602060048201526017602482015276496e76616c6964206e756d626572206f66206974656d7360481b6044820152606401610309565b6000670de0b6b3a764000060065487610cc191906116c6565b610ccb91906116dd565b905060006002670de0b6b3a7640000600754670de0b6b3a764000060018b610cf3919061161d565b610cfd908c6116c6565b610d0791906116dd565b610d1191906116c6565b610d1b91906116dd565b610d2591906116dd565b905080600654610d35919061160a565b9450610d4c6008548361154590919063ffffffff16565b9250610d636009548361154590919063ffffffff16565b935082610d70858461160a565b610d7a919061160a565b955050509193509193565b600082118015610d955750600081115b8015610dc0575081670de0b6b3a764000060065483610db491906116c6565b610dbe91906116dd565b145b610dfe5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c696420616d6f756e747360881b6044820152606401610309565b8160046000828254610e10919061160a565b925050819055508060056000828254610e29919061160a565b90915550506002546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610e6290339030908790600401611630565b6020604051808303816000875af1158015610e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea59190611654565b506003546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610eda90339030908690600401611630565b6020604051808303816000875af1158015610ef9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1d9190611654565b50604080518381526020810183905233917fac1d76749e5447b7b16f5ab61447e1bd502f3bb4807af3b28e620d1700a6ee45910160405180910390a25050565b610f65611442565b600a544210610fb25760405162461bcd60e51b8152602060048201526019602482015278139bdd081a5b881c1d589b1a58c81cd85b19481c195c9a5bd9603a1b6044820152606401610309565b600081116110025760405162461bcd60e51b815260206004820152601b60248201527f4d7573742073656c6c206174206c65617374206f6e65206974656d00000000006044820152606401610309565b6000670de0b6b3a7640000600b548361101b91906116c6565b61102591906116dd565b90508160046000828254611039919061160a565b925050819055508060056000828254611052919061161d565b90915550506002546040516323b872dd60e01b81526001600160a01b03909116906323b872dd9061108b90339030908790600401611630565b6020604051808303816000875af11580156110aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ce9190611654565b6111125760405162461bcd60e51b8152602060048201526015602482015274105cdcd95d081d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610309565b6003546040516370a0823160e01b815230600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa15801561115a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117e9190611676565b10156111cc5760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e742055534443206c697175696469747900000000006044820152606401610309565b60035460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561121d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112419190611654565b50604080518381526020810183905233917f4649bca94dacc8cff7b6f4c534914e8a9bb5a78a628497b9d49930d2cef0dc6391016108f3565b600080600080600085116112ca5760405162461bcd60e51b8152602060048201526017602482015276496e76616c6964206e756d626572206f66206974656d7360481b6044820152606401610309565b6006546000906112e287670de0b6b3a76400006116c6565b6112ec91906116dd565b905060006002670de0b6b3a7640000600754670de0b6b3a76400008a6001611314919061160a565b61131e908c6116c6565b61132891906116dd565b61133291906116c6565b61133c91906116dd565b61134691906116dd565b9050600060065482670de0b6b3a764000061136191906116c6565b61136b91906116dd565b90508060065461137b919061161d565b95506113926008548461154590919063ffffffff16565b93506113a96009548461154590919063ffffffff16565b9450836113b6868561161d565b6113c0919061161d565b96505050509193509193565b6113d461149b565b6001600160a01b0381166114395760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610309565b6105e6816114f5565b6002600154036114945760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610309565b6002600155565b6000546001600160a01b03163314610bfd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610309565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061155a8383670de0b6b3a7640000611563565b90505b92915050565b600082600019048411830215820261157a57600080fd5b50910281810615159190040190565b60006020828403121561159b57600080fd5b5035919050565b600080604083850312156115b557600080fd5b50508035926020909101359150565b6000602082840312156115d657600080fd5b81356001600160a01b03811681146115ed57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561155d5761155d6115f4565b8181038181111561155d5761155d6115f4565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561166657600080fd5b815180151581146115ed57600080fd5b60006020828403121561168857600080fd5b5051919050565b6020808252601c908201527f496e73756666696369656e74206173736574206c697175696469747900000000604082015260600190565b808202811582820484141761155d5761155d6115f4565b6000826116fa57634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122045d0f3536b9cd34c53aa7ff68968c7857b972011ac1c79bf34f6931fd75562fa64736f6c63430008130033a264697066735822122070c213c24616c298032c4705813c32780aef64b71ff2a53fba5cfa1c663d993164736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createPool((address,uint256,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": {
        "notice": "풀 생성 함수"
      },
      "getAllPools()": {
        "notice": "모든 풀의 주소 반환 함수"
      },
      "getAllPoolsInfo()": {
        "notice": "모든 풀의 정보를 확인하는 함수"
      },
      "getPoolInfo(address)": {
        "notice": "특정 풀의 정보 확인 함수"
      },
      "pools(uint256)": {
        "notice": "풀 정보 저장"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8342,
        "contract": "src/contracts/PlantyFactory.sol:PlantyFactory",
        "label": "pools",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_contract(PlantyPool)9454)dyn_storage"
      },
      {
        "astId": 8344,
        "contract": "src/contracts/PlantyFactory.sol:PlantyFactory",
        "label": "admin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(PlantyPool)9454)dyn_storage": {
        "base": "t_contract(PlantyPool)9454",
        "encoding": "dynamic_array",
        "label": "contract PlantyPool[]",
        "numberOfBytes": "32"
      },
      "t_contract(PlantyPool)9454": {
        "encoding": "inplace",
        "label": "contract PlantyPool",
        "numberOfBytes": "20"
      }
    }
  }
}
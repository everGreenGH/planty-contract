/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PlantyPoolInterface extends ethers.utils.Interface {
  functions: {
    "addLiquidity(uint256,uint256)": FunctionFragment;
    "assetToken()": FunctionFragment;
    "buyAsset(uint256)": FunctionFragment;
    "buyAssetDuringPublicSale(uint256)": FunctionFragment;
    "configurePublicSale(uint256,uint256)": FunctionFragment;
    "delta()": FunctionFragment;
    "getBuyInfo(uint256)": FunctionFragment;
    "getSellInfo(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "protocolFeeMultiplier()": FunctionFragment;
    "publicSaleEndTime()": FunctionFragment;
    "publicSalePrice()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reserveAsset()": FunctionFragment;
    "reserveUSDC()": FunctionFragment;
    "sellAsset(uint256)": FunctionFragment;
    "sellAssetDuringPublicSale(uint256)": FunctionFragment;
    "spotPrice()": FunctionFragment;
    "tradeFeeMultiplier()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usdcToken()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assetToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyAsset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyAssetDuringPublicSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configurePublicSale",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "delta", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBuyInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolFeeMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicSaleEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicSalePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveUSDC",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellAsset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellAssetDuringPublicSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "spotPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tradeFeeMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assetToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyAssetDuringPublicSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configurePublicSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delta", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBuyInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSellInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicSaleEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicSalePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveUSDC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellAssetDuringPublicSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "spotPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tradeFeeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;

  events: {
    "LiquidityAdded(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PublicSaleConfigured(uint256,uint256)": EventFragment;
    "PublicSalePurchase(address,uint256,uint256)": EventFragment;
    "PublicSaleSell(address,uint256,uint256)": EventFragment;
    "Swapped(address,uint256,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PublicSaleConfigured"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PublicSalePurchase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PublicSaleSell"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swapped"): EventFragment;
}

export class PlantyPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PlantyPoolInterface;

  functions: {
    addLiquidity(
      assetAmount: BigNumberish,
      usdcAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assetToken(overrides?: CallOverrides): Promise<[string]>;

    buyAsset(
      plantyTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyAssetDuringPublicSale(
      numItems: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configurePublicSale(
      duration: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delta(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBuyInfo(
      plantyTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        inputValue: BigNumber;
        newSpotPrice: BigNumber;
        tradeFee: BigNumber;
        protocolFee: BigNumber;
      }
    >;

    getSellInfo(
      usdcAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        outputValue: BigNumber;
        newSpotPrice: BigNumber;
        tradeFee: BigNumber;
        protocolFee: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    protocolFeeMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    publicSaleEndTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    publicSalePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserveAsset(overrides?: CallOverrides): Promise<[BigNumber]>;

    reserveUSDC(overrides?: CallOverrides): Promise<[BigNumber]>;

    sellAsset(
      plantyTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellAssetDuringPublicSale(
      numItems: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    spotPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    tradeFeeMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdcToken(overrides?: CallOverrides): Promise<[string]>;
  };

  addLiquidity(
    assetAmount: BigNumberish,
    usdcAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assetToken(overrides?: CallOverrides): Promise<string>;

  buyAsset(
    plantyTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyAssetDuringPublicSale(
    numItems: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configurePublicSale(
    duration: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delta(overrides?: CallOverrides): Promise<BigNumber>;

  getBuyInfo(
    plantyTokenAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      inputValue: BigNumber;
      newSpotPrice: BigNumber;
      tradeFee: BigNumber;
      protocolFee: BigNumber;
    }
  >;

  getSellInfo(
    usdcAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      outputValue: BigNumber;
      newSpotPrice: BigNumber;
      tradeFee: BigNumber;
      protocolFee: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  protocolFeeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  publicSaleEndTime(overrides?: CallOverrides): Promise<BigNumber>;

  publicSalePrice(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserveAsset(overrides?: CallOverrides): Promise<BigNumber>;

  reserveUSDC(overrides?: CallOverrides): Promise<BigNumber>;

  sellAsset(
    plantyTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellAssetDuringPublicSale(
    numItems: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  spotPrice(overrides?: CallOverrides): Promise<BigNumber>;

  tradeFeeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdcToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addLiquidity(
      assetAmount: BigNumberish,
      usdcAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    assetToken(overrides?: CallOverrides): Promise<string>;

    buyAsset(
      plantyTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyAssetDuringPublicSale(
      numItems: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    configurePublicSale(
      duration: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    delta(overrides?: CallOverrides): Promise<BigNumber>;

    getBuyInfo(
      plantyTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        inputValue: BigNumber;
        newSpotPrice: BigNumber;
        tradeFee: BigNumber;
        protocolFee: BigNumber;
      }
    >;

    getSellInfo(
      usdcAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        outputValue: BigNumber;
        newSpotPrice: BigNumber;
        tradeFee: BigNumber;
        protocolFee: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    protocolFeeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    publicSaleEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    publicSalePrice(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reserveAsset(overrides?: CallOverrides): Promise<BigNumber>;

    reserveUSDC(overrides?: CallOverrides): Promise<BigNumber>;

    sellAsset(
      plantyTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sellAssetDuringPublicSale(
      numItems: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    spotPrice(overrides?: CallOverrides): Promise<BigNumber>;

    tradeFeeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    usdcToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    LiquidityAdded(
      user?: string | null,
      assetAmount?: null,
      usdcAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; assetAmount: BigNumber; usdcAmount: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    PublicSaleConfigured(
      endTime?: null,
      price?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { endTime: BigNumber; price: BigNumber }
    >;

    PublicSalePurchase(
      user?: string | null,
      assetAmount?: null,
      usdcAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; assetAmount: BigNumber; usdcAmount: BigNumber }
    >;

    PublicSaleSell(
      user?: string | null,
      assetAmount?: null,
      usdcAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; assetAmount: BigNumber; usdcAmount: BigNumber }
    >;

    Swapped(
      user?: string | null,
      assetAmount?: null,
      usdcAmount?: null,
      isBuying?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, boolean],
      {
        user: string;
        assetAmount: BigNumber;
        usdcAmount: BigNumber;
        isBuying: boolean;
      }
    >;
  };

  estimateGas: {
    addLiquidity(
      assetAmount: BigNumberish,
      usdcAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assetToken(overrides?: CallOverrides): Promise<BigNumber>;

    buyAsset(
      plantyTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyAssetDuringPublicSale(
      numItems: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configurePublicSale(
      duration: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delta(overrides?: CallOverrides): Promise<BigNumber>;

    getBuyInfo(
      plantyTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellInfo(
      usdcAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    publicSaleEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    publicSalePrice(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserveAsset(overrides?: CallOverrides): Promise<BigNumber>;

    reserveUSDC(overrides?: CallOverrides): Promise<BigNumber>;

    sellAsset(
      plantyTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellAssetDuringPublicSale(
      numItems: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    spotPrice(overrides?: CallOverrides): Promise<BigNumber>;

    tradeFeeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdcToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      assetAmount: BigNumberish,
      usdcAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assetToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyAsset(
      plantyTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyAssetDuringPublicSale(
      numItems: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configurePublicSale(
      duration: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delta(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBuyInfo(
      plantyTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSellInfo(
      usdcAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeeMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicSaleEndTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicSalePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserveAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveUSDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellAsset(
      plantyTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellAssetDuringPublicSale(
      numItems: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    spotPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradeFeeMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdcToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

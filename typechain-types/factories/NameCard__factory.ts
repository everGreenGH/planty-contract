/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { NameCard, NameCardInterface } from "../NameCard";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "walletAddr",
        type: "address",
      },
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "phoneNum",
            type: "string",
          },
          {
            internalType: "enum NameCardInterface.Team",
            name: "team",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "year",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct NameCardInterface.NameCardInfo",
        name: "nameCardInfo",
        type: "tuple",
      },
    ],
    name: "NameCardUpserted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "walletAddr",
        type: "address",
      },
    ],
    name: "getNameCard",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "phoneNum",
            type: "string",
          },
          {
            internalType: "enum NameCardInterface.Team",
            name: "team",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "year",
            type: "uint256",
          },
        ],
        internalType: "struct NameCardInterface.NameCardInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nameCardInfos",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "phoneNum",
        type: "string",
      },
      {
        internalType: "enum NameCardInterface.Team",
        name: "team",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "year",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "walletAddr",
        type: "address",
      },
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "phoneNum",
            type: "string",
          },
          {
            internalType: "enum NameCardInterface.Team",
            name: "team",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "year",
            type: "uint256",
          },
        ],
        internalType: "struct NameCardInterface.NameCardInfo",
        name: "nameCardInput",
        type: "tuple",
      },
    ],
    name: "upsertNameCard",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610937806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806317c2aaee146100465780638681824e1461006f57806396e6539e14610092575b600080fd5b6100596100543660046104dd565b6100a7565b604051610066919061057d565b60405180910390f35b61008261007d3660046104dd565b61025a565b60405161006694939291906105e0565b6100a56100a03660046106f0565b610396565b005b6100d0604080516080810182526060808252602082015290810160008152602001600081525090565b6001600160a01b03821660009081526020819052604090819020815160808101909252805482908290610102906107b8565b80601f016020809104026020016040519081016040528092919081815260200182805461012e906107b8565b801561017b5780601f106101505761010080835404028352916020019161017b565b820191906000526020600020905b81548152906001019060200180831161015e57829003601f168201915b50505050508152602001600182018054610194906107b8565b80601f01602080910402602001604051908101604052809291908181526020018280546101c0906107b8565b801561020d5780601f106101e25761010080835404028352916020019161020d565b820191906000526020600020905b8154815290600101906020018083116101f057829003601f168201915b5050509183525050600282015460209091019060ff16600181111561023457610234610545565b600181111561024557610245610545565b81526020016003820154815250509050919050565b600060208190529081526040902080548190610275906107b8565b80601f01602080910402602001604051908101604052809291908181526020018280546102a1906107b8565b80156102ee5780601f106102c3576101008083540402835291602001916102ee565b820191906000526020600020905b8154815290600101906020018083116102d157829003601f168201915b505050505090806001018054610303906107b8565b80601f016020809104026020016040519081016040528092919081815260200182805461032f906107b8565b801561037c5780601f106103515761010080835404028352916020019161037c565b820191906000526020600020905b81548152906001019060200180831161035f57829003601f168201915b505050506002830154600390930154919260ff1691905084565b6001600160a01b03821633146104095760405162461bcd60e51b815260206004820152602e60248201527f4572726f723a20596f752063616e206f6e6c792075706461746520796f75722060448201526d37bbb7103730b6b29031b0b9321760911b606482015260840160405180910390fd5b6001600160a01b0382166000908152602081905260409020815182919081906104329082610841565b50602082015160018201906104479082610841565b50604082015160028201805460ff19166001838181111561046a5761046a610545565b021790555060608201518160030155905050816001600160a01b03167f6ea9988b6824836e80db8864ee618c33c9a4523e884fda74a85793492910b42c826040516104b5919061057d565b60405180910390a25050565b80356001600160a01b03811681146104d857600080fd5b919050565b6000602082840312156104ef57600080fd5b6104f8826104c1565b9392505050565b6000815180845260005b8181101561052557602081850181015186830182015201610509565b506000602082860101526020601f19601f83011685010191505092915050565b634e487b7160e01b600052602160045260246000fd5b6002811061057957634e487b7160e01b600052602160045260246000fd5b9052565b60208152600082516080602084015261059960a08401826104ff565b90506020840151601f198483030160408501526105b682826104ff565b91505060408401516105cb606085018261055b565b50606084015160808401528091505092915050565b6080815260006105f360808301876104ff565b828103602084015261060581876104ff565b915050610615604083018561055b565b82606083015295945050505050565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff8111828210171561065d5761065d610624565b60405290565b600082601f83011261067457600080fd5b813567ffffffffffffffff8082111561068f5761068f610624565b604051601f8301601f19908116603f011681019082821181831017156106b7576106b7610624565b816040528381528660208588010111156106d057600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561070357600080fd5b61070c836104c1565b9150602083013567ffffffffffffffff8082111561072957600080fd5b908401906080828703121561073d57600080fd5b61074561063a565b82358281111561075457600080fd5b61076088828601610663565b82525060208301358281111561077557600080fd5b61078188828601610663565b602083015250604083013591506002821061079b57600080fd5b816040820152606083013560608201528093505050509250929050565b600181811c908216806107cc57607f821691505b6020821081036107ec57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561083c57600081815260208120601f850160051c810160208610156108195750805b601f850160051c820191505b8181101561083857828155600101610825565b5050505b505050565b815167ffffffffffffffff81111561085b5761085b610624565b61086f8161086984546107b8565b846107f2565b602080601f8311600181146108a4576000841561088c5750858301515b600019600386901b1c1916600185901b178555610838565b600085815260208120601f198616915b828110156108d3578886015182559484019460019091019084016108b4565b50858210156108f15787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea264697066735822122064da91631c047c5f4eb13e8ba6920cb0eb0c239ae7e0b1e02cace531b86b25b964736f6c63430008130033";

export class NameCard__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<NameCard> {
    return super.deploy(overrides || {}) as Promise<NameCard>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): NameCard {
    return super.attach(address) as NameCard;
  }
  connect(signer: Signer): NameCard__factory {
    return super.connect(signer) as NameCard__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NameCardInterface {
    return new utils.Interface(_abi) as NameCardInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NameCard {
    return new Contract(address, _abi, signerOrProvider) as NameCard;
  }
}

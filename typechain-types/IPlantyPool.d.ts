/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IPlantyPoolInterface extends ethers.utils.Interface {
  functions: {
    "addLiquidity(uint256,uint256)": FunctionFragment;
    "buyAsset(uint256)": FunctionFragment;
    "buyAssetDuringPublicSale(uint256)": FunctionFragment;
    "configurePublicSale(uint256,uint256)": FunctionFragment;
    "getBuyInfo(uint256)": FunctionFragment;
    "getSellInfo(uint256)": FunctionFragment;
    "sellAsset(uint256)": FunctionFragment;
    "sellAssetDuringPublicSale(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyAsset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyAssetDuringPublicSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configurePublicSale",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellAsset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellAssetDuringPublicSale",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyAssetDuringPublicSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configurePublicSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBuyInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSellInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellAssetDuringPublicSale",
    data: BytesLike
  ): Result;

  events: {};
}

export class IPlantyPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPlantyPoolInterface;

  functions: {
    addLiquidity(
      assetAmount: BigNumberish,
      usdcAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyAsset(
      numItems: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyAssetDuringPublicSale(
      numItems: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    configurePublicSale(
      duration: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBuyInfo(
      plantyTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        inputValue: BigNumber;
        newSpotPrice: BigNumber;
        tradeFee: BigNumber;
        protocolFee: BigNumber;
      }
    >;

    getSellInfo(
      plantyTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        outputValue: BigNumber;
        newSpotPrice: BigNumber;
        tradeFee: BigNumber;
        protocolFee: BigNumber;
      }
    >;

    sellAsset(
      numItems: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellAssetDuringPublicSale(
      numItems: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    assetAmount: BigNumberish,
    usdcAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyAsset(
    numItems: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyAssetDuringPublicSale(
    numItems: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  configurePublicSale(
    duration: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBuyInfo(
    plantyTokenAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      inputValue: BigNumber;
      newSpotPrice: BigNumber;
      tradeFee: BigNumber;
      protocolFee: BigNumber;
    }
  >;

  getSellInfo(
    plantyTokenAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      outputValue: BigNumber;
      newSpotPrice: BigNumber;
      tradeFee: BigNumber;
      protocolFee: BigNumber;
    }
  >;

  sellAsset(
    numItems: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellAssetDuringPublicSale(
    numItems: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      assetAmount: BigNumberish,
      usdcAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyAsset(numItems: BigNumberish, overrides?: CallOverrides): Promise<void>;

    buyAssetDuringPublicSale(
      numItems: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    configurePublicSale(
      duration: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBuyInfo(
      plantyTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        inputValue: BigNumber;
        newSpotPrice: BigNumber;
        tradeFee: BigNumber;
        protocolFee: BigNumber;
      }
    >;

    getSellInfo(
      plantyTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        outputValue: BigNumber;
        newSpotPrice: BigNumber;
        tradeFee: BigNumber;
        protocolFee: BigNumber;
      }
    >;

    sellAsset(numItems: BigNumberish, overrides?: CallOverrides): Promise<void>;

    sellAssetDuringPublicSale(
      numItems: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addLiquidity(
      assetAmount: BigNumberish,
      usdcAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyAsset(
      numItems: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyAssetDuringPublicSale(
      numItems: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    configurePublicSale(
      duration: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBuyInfo(
      plantyTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellInfo(
      plantyTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellAsset(
      numItems: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellAssetDuringPublicSale(
      numItems: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      assetAmount: BigNumberish,
      usdcAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyAsset(
      numItems: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyAssetDuringPublicSale(
      numItems: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    configurePublicSale(
      duration: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBuyInfo(
      plantyTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSellInfo(
      plantyTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sellAsset(
      numItems: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellAssetDuringPublicSale(
      numItems: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
